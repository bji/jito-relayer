name: Setup Rust
description: Installs rust in a bare metal fashion
runs:
  using: composite
  steps:
    - name: Generate workflow id (for caching)
      run: echo "WORKFLOW_ID=${{github.workflow}}" >> $GITHUB_ENV
      shell: bash


    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      shell: bash

      run: echo "$GITHUB_CONTEXT"
    - name: Dump job context
      env:
        JOB_CONTEXT: ${{ toJson(job) }}
      shell: bash

      run: echo "$JOB_CONTEXT"
    - name: Dump steps context
      env:
        STEPS_CONTEXT: ${{ toJson(steps) }}
      shell: bash

      run: echo "$STEPS_CONTEXT"
    - name: Dump runner context
      env:
        RUNNER_CONTEXT: ${{ toJson(runner) }}
      shell: bash

      run: echo "$RUNNER_CONTEXT"
    - name: Dump strategy context
      env:
        STRATEGY_CONTEXT: ${{ toJson(strategy) }}
      shell: bash

      run: echo "$STRATEGY_CONTEXT"

    - name: Dump matrix context
      env:
        MATRIX_CONTEXT: ${{ toJson(matrix) }}
      shell: bash

      run: echo "$MATRIX_CONTEXT"

    - name: Show default environment variables
      run: |
        echo "The job_id is: $GITHUB_JOB"   # reference the default environment variables
        echo "The id of this action is: $GITHUB_ACTION"   # reference the default environment variables
        echo "The run id is: $GITHUB_RUN_ID"
        echo "The GitHub Actor's username is: $GITHUB_ACTOR"
        echo "GitHub SHA: $GITHUB_SHA"
      shell: bash



    - name: Install Protobuf
      run: |
        export PROTOC_VERSION=21.12 && \
        export PROTOC_ZIP=protoc-$PROTOC_VERSION-linux-x86_64.zip && \
        curl -Ss -OL https://github.com/google/protobuf/releases/download/v$PROTOC_VERSION/$PROTOC_ZIP \
        && sudo unzip -o $PROTOC_ZIP -d /usr/local bin/protoc \
        && sudo unzip -o $PROTOC_ZIP -d /usr/local include/* \
        && rm -f $PROTOC_ZIP
      shell: bash

    - name: cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: cache rust files
      uses: actions/cache@v3
      with:
        path: |
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/*.rs') }}

    - name: Check rust version before
      run: |
        rustc --version || true;
        cargo --version || true;
        cargo clippy --version || true;
        cargo fmt --version || true;
      shell: bash

    - uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        override: true
        components: clippy, rustfmt

    - name: Check rust version after
      run: |
        rustc --version;
        cargo --version;
        cargo clippy --version;
        cargo fmt --version;
      shell: bash
